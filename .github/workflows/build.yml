name: Upload File to GitHub Artifacts
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch: # Allows manual trigger

env:
  REPO_NAME: "augweb"
  REF_NAME: "v3"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker BuildX (Optional, but good practice for caching)
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      id: docker_build
      uses: docker/build-push-action@v5
      with:
        context: . # Build context is the current directory
        push: false # Don't push to a registry, just build locally on the runner
        tags: pyinstaller-builder:latest # Tag for the image
        load: true # Load the image into Docker daemon after building

    - name: Run container and retrieve executable
      # This step starts a container from the built image and copies the executable out.
      # We give the container a name for easier reference.
      run: |
        CONTAINER_ID=$(docker create pyinstaller-builder:latest)
        docker cp $CONTAINER_ID:/app/dist/dbmanager ./dbmanager
        docker rm $CONTAINER_ID # Clean up the temporary container

    - name: Verify executable (Optional)
      run: |
        ls -l ./dbmanager
        file ./dbmanager # Show executable type and dependencies
        # You could even try to run it on the runner if the runner's GLIBC is compatible
        # ./dbmanager

    - name: Upload PyInstaller executable as artifact
      uses: actions/upload-artifact@v4
      with:
        name: pyinstaller-executable
        path: ./dbmanager # Path to the executable on the runner
    
    - name: Print
      run: |
        ls dist