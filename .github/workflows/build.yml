name: Multi-Platform PyInstaller Build

on: workflow_dispatch

jobs:
  # --- Linux Builds ---
  build-linux-amd64:
    runs-on: ubuntu-latest # GitHub's default Ubuntu runner is amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Choose your Python version
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (Linux AMD64)
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: mv dist/dbmanager dist/dbmanager-linux-amd64
      - name: Upload artifact (Linux AMD64)
        uses: actions/upload-artifact@v4
        with:
          name: your_script-linux-amd64
          path: dist/dbmanager-linux-amd64

  build-linux-arm64:
    runs-on: ubuntu-latest # You'll need an ARM64 runner or use QEMU/Docker buildx
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Option 1: Use an ARM64 runner if available (e.g., self-hosted or specific GitHub runner)
      # Option 2: Use Docker Buildx with emulation (more complex, see below)
      # For simplicity, if using GitHub-hosted runners, you might use 'ubuntu-latest' and rely on Docker buildx
      # Or if self-hosted, specify an 'arm64' label.
      # For now, let's assume `runs-on: ubuntu-latest` and we'll use Docker buildx below.
      - name: Set up QEMU (for ARM64 emulation on AMD64 runner)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for Linux ARM64
        run: |
          docker buildx build --platform linux/arm64/v8 -t pyinstaller-arm64-builder -f Dockerfile.arm64 . --load
      - name: Run container and retrieve executable (Linux ARM64)
        run: |
          CONTAINER_ID=$(docker create pyinstaller-arm64-builder)
          docker cp $CONTAINER_ID:/app/dist/dbmanager ./dbmanager-linux-arm64
          docker rm $CONTAINER_ID
      - name: Upload artifact (Linux ARM64)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-linux-arm64
          path: dbmanager-linux-arm64

  # --- Windows Build ---
  build-windows:
    runs-on: windows-latest # GitHub's Windows runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (Windows)
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: Move-Item dist/dbmanager.exe dist/dbmanager-windows.exe # PowerShell syntax
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-windows
          path: dist/dbmanager-windows.exe

  # --- macOS Build ---
  build-macos:
    runs-on: macos-latest # GitHub's macOS runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (macOS)
        run: ppyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: mv dist/dbmanager dist/dbmanager-macos # macOS executables don't have .exe
      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-macos
          path: dist/dbmanager-macos
          # For macOS, you might also want to bundle into a .app or .dmg
          # This would require additional steps and tools like 'py2app' or manual scripting.