name: Default Build

on:
  push:
    branches:
      - '1.0.0'   # 匹配以日期命名的分支

# 添加全局权限配置
permissions:
  contents: write  # 这给予了创建 release 所需的权限

jobs:


  build-linux-amd64-debian:
    runs-on: ubuntu-latest # You'll need an ARM64 runner or use QEMU/Docker buildx
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Option 1: Use an ARM64 runner if available (e.g., self-hosted or specific GitHub runner)
      # Option 2: Use Docker Buildx with emulation (more complex, see below)
      # For simplicity, if using GitHub-hosted runners, you might use 'ubuntu-latest' and rely on Docker buildx
      # Or if self-hosted, specify an 'arm64' label.
      # For now, let's assume `runs-on: ubuntu-latest` and we'll use Docker buildx below.
      - name: Set up QEMU ( Linux AMD64 Debian runner)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for Linux AMD64 Debian
        run: |
          docker buildx build --platform linux/amd64 -t pyinstaller-amd64-builder -f Dockerfile.debian . --load
      - name: Run container and retrieve executable (Linux AMD64 Debian)
        run: |
          CONTAINER_ID=$(docker create pyinstaller-amd64-builder)
          docker cp $CONTAINER_ID:/app/dist/dbmanager ./dbmanager-linux-amd64-debian
          docker rm $CONTAINER_ID
      - name: Upload artifact (Linux AMD64 Debian)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-linux-amd64-debian
          path: dbmanager-linux-amd64-debian

  # --- Windows Build ---
  build-windows:
    runs-on: windows-latest # GitHub's Windows runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (Windows)
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: Move-Item dist/dbmanager.exe dist/dbmanager-windows.exe # PowerShell syntax
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-windows
          path: dist/dbmanager-windows.exe


  # 在所有其他 jobs 后面添加
  create-release:
    needs: [build-linux-amd64-debian, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.ref_name }}
          files: |
            artifacts/dbmanager-linux-amd64-debian/*
            artifacts/dbmanager-windows/*
          draft: false
          prerelease: false
          generate_release_notes: true

