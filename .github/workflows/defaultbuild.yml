name: Default Build

on:
  push:
    tags:
      - 'v1.0.*'   # 匹配以日期命名的分支

# 添加全局权限配置
permissions:
  contents: write  # 这给予了创建 release 所需的权限

jobs:
  # --- Linux Builds ---
  build-linux-amd64:
    runs-on: ubuntu-latest # GitHub's default Ubuntu runner is amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Choose your Python version
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (Linux AMD64)
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: mv dist/dbmanager dist/dbmanager-linux-amd64
      - name: Upload artifact (Linux AMD64)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-linux-amd64
          path: dist/dbmanager-linux-amd64


  build-linux-amd64-debian:
    runs-on: ubuntu-latest # You'll need an ARM64 runner or use QEMU/Docker buildx
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Option 1: Use an ARM64 runner if available (e.g., self-hosted or specific GitHub runner)
      # Option 2: Use Docker Buildx with emulation (more complex, see below)
      # For simplicity, if using GitHub-hosted runners, you might use 'ubuntu-latest' and rely on Docker buildx
      # Or if self-hosted, specify an 'arm64' label.
      # For now, let's assume `runs-on: ubuntu-latest` and we'll use Docker buildx below.
      - name: Set up QEMU ( Linux AMD64 Debian runner)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for Linux AMD64 Debian
        run: |
          docker buildx build --platform linux/amd64 -t pyinstaller-amd64-builder -f Dockerfile.debian . --load
      - name: Run container and retrieve executable (Linux AMD64 Debian)
        run: |
          CONTAINER_ID=$(docker create pyinstaller-amd64-builder)
          docker cp $CONTAINER_ID:/app/dist/dbmanager ./dbmanager-linux-amd64-debian
          docker rm $CONTAINER_ID
      - name: Upload artifact (Linux AMD64 Debian)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-linux-amd64-debian
          path: dbmanager-linux-amd64-debian

  # --- Windows Build ---
  build-windows:
    runs-on: windows-latest # GitHub's Windows runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build PyInstaller executable (Windows)
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        run: Move-Item dist/dbmanager.exe dist/dbmanager-windows.exe # PowerShell syntax
      - name: Upload artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-windows
          path: dist/dbmanager-windows.exe

  # ... (previous jobs) ...

  build-macos-arm64:
    runs-on: macos-14 # GitHub's macOS runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Or your desired Python version
      - name: Install dependencies
        run: pip install pyinstaller -r requirements.txt
      - name: Build PyInstaller executable (macOS)
        # Corrected line: 'pyinstaller' instead of 'ppyinstaller'
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        # Adjust as per your actual output path if different
        run: mv dist/dbmanager dist/dbmanager-macos-arm64
      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-macos-arm64
          path: dist/dbmanager-macos-arm64

  build-macos-Intel:
    runs-on: macos-13 # GitHub's macOS runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Or your desired Python version
      - name: Install dependencies
        run: pip install pyinstaller -r requirements.txt
      - name: Build PyInstaller executable (macOS)
        # Corrected line: 'pyinstaller' instead of 'ppyinstaller'
        run: pyinstaller --onefile --name=dbmanager --clean --noconfirm --hidden-import=datebase db_manager.py
      - name: Rename executable
        # Adjust as per your actual output path if different
        run: mv dist/dbmanager dist/dbmanager-macos-Intel
      - name: Upload artifact (macOS)
        uses: actions/upload-artifact@v4
        with:
          name: dbmanager-macos-Intel
          path: dist/dbmanager-macos-Intel

  # 在所有其他 jobs 后面添加
  create-release:
    needs: [build-linux-amd64, build-linux-amd64-debian, build-windows, build-macos-arm64, build-macos-Intel]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/20')
    steps:
      - name: Checkout repository  # 添加这个步骤
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的 git 历史
          
      - name: Configure Git  # 添加 Git 配置
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      # 如果是手动触发，创建标签
      - name: Create Tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag ${{ github.event.inputs.release_tag }}
          git push origin ${{ github.event.inputs.release_tag }}
          
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            artifacts/dbmanager-linux-amd64/*
            artifacts/dbmanager-linux-amd64-debian/*
            artifacts/dbmanager-windows/*
            artifacts/dbmanager-macos-arm64/*
            artifacts/dbmanager-macos-Intel/*
          draft: false
          prerelease: ${{ github.event.inputs.is_prerelease }}
          generate_release_notes: true

